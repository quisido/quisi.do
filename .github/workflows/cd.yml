name: CI/CD

jobs:
  # Stage 1: devskim, install
  devskim:
    name: DevSkim
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
        - 8126:8126
    permissions:
      actions: read
      contents: read
      security-events: write
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan
        uses: microsoft/devskim-action@v1
        with:
          options-json: config/devskim.json
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: devskim-results.sarif
          wait-for-processing: true

  install:
    name: Install
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps

  # Stage 2: build
  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Build
        run: npm run build
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_PROFILING_ENABLED: true
          DD_VERSION: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          NODE_ENV: production
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: packages/*/dist/

  # Stage 3: lighthouse-ci, test, test-applications
  lighthouse-ci:
    name: Lighthouse (continuous integration)
    needs: build
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Audit
        run: npm run lighthouse:report --workspace=packages/vite
      - name: Validate
        run: npm run postlighthouse --workspace=packages/vite
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-ci
          path: |
            packages/*/lighthouse.report.*
            packages/*/lighthouse-*.devtoolslog.json
            packages/*/lighthouse-*.trace.json

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --immutable
      - name: Test
        run: npm run test
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_CIVISIBILITY_AGENTLESS_ENABLED: true
          DD_ENV: ci
          DD_SERVICE: quisi.do

  #   Run test on applications, because test won't be triggered for applications
  # by the publish step.
  test-applications:
    name: Test applications
    needs: build
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Test quisi.do
        run: npm test --workspace=packages/vite

  # Stage 4: github-pages, npm, sentry-release
  datadog-sourcemaps:
    name: Datadog sourcemaps
    needs: [lighthouse-ci, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Upload Datadog sourcemaps
        run: npm run datadog:sourcemaps --workspace=packages/vite
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          RELEASE_VERSION: ${{ github.sha }}

  github-pages:
    name: GitHub Pages
    needs: [lighthouse-ci, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: true
          folder: packages/vite/dist/
          single-commit: true

  npm:
    name: NPM
    needs: [build, test]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: >
          npm config set "//registry.npmjs.org/:_authToken" $NPM_AUTH_TOKEN;
          npm publish;

  sentry-release:
    name: Sentry release
    needs: [lighthouse-ci, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_LOG_LEVEL: info
          SENTRY_ORG: quisido
          SENTRY_PROJECT: quisi-do
        with:
          environment: production
          sourcemaps: packages/vite/dist
          version: ${{ github.sha }}

  # Stage 5: cloudflare-purge, github-packages, wrangler-deploy-*
  cloudflare-purge:
    name: Cloudflare purge
    needs: github-pages
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Purge Cloudflare files
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_PURGE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: >
          curl \
            --data '{
              "files": [
                "https://quisi.do",
                "https://quisi.do/index.html"
              ]
            }' \
            --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            --header "Content-Type:application/json" \
            --request POST \
            "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache"

  github-packages:
    name: GitHub Packages
    needs: npm
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    permissions:
      contents: read
      packages: write
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          npm config set npmAuthToken $NPM_AUTH_TOKEN;
          npm config set \
            npmScopes.${{ github.repository_owner }}.npmPublishRegistry \
            'https://npm.pkg.github.com';
          npm publish;

  wrangler-deploy-authn:
    name: Wrangler deploy (Authentication)
    needs: [lighthouse-ci, npm, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Deploy
        run: npm run production:deploy --workspace=packages/authn
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_EDIT_WORKERS_API_TOKEN }}

  wrangler-deploy-csp:
    name: Wrangler deploy (Content Security Policy)
    needs: [lighthouse-ci, npm, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Deploy
        run: npm run production:deploy --workspace=packages/csp
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_EDIT_WORKERS_API_TOKEN }}

  wrangler-deploy-dashboard:
    name: Wrangler deploy (Dashboard)
    needs: [lighthouse-ci, npm, test-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Deploy
        run: npm run production:deploy --workspace=packages/dashboard
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_EDIT_WORKERS_API_TOKEN }}

  # Stage 6: lighthouse-production
  lighthouse-production:
    name: Lighthouse (production)
    needs: cloudflare-purge
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: latest
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Audit
        run: npm run lighthouse:report:production --workspace=packages/vite
      - name: Validate
        run: npm run postlighthouse --workspace=packages/vite
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-production
          path: |
            packages/*/lighthouse.report.*
            packages/*/lighthouse-*.devtoolslog.json
            packages/*/lighthouse-*.trace.json

on:
  push:
    branches: [main]
  workflow_dispatch:
